#ifndef CELLWISE_H
#define CELLWISE_H

#include "platform_common.h"

typedef enum 
{
    BAT_OFF_CHARGE 		= 0x00,
    BAT_IN_CHARGING,
    BAT_FULL_CHARGE,
}bat_charge_envet;

typedef	void (*ChargeCheckCb)(bat_charge_envet evnet);


//**********************************************************************
// º¯Êý¹¦ÄÜ:    µçÁ¿¼Æ³õÊ¼»¯
// ÊäÈë²ÎÊý£º    ÎÞ
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ³õÊ¼»¯³É¹¦
// 0xff    :    ³õÊ¼»¯Ê§°Ü
//**********************************************************************
extern uint8 Drv_Bat_Open(ChargeCheckCb chg_cb);

//**********************************************************************
// º¯Êý¹¦ÄÜ:   µçÁ¿¼Æ×Ô¼ì
// ÊäÈë²ÎÊý£º   ÎÞ
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ×Ô¼ì³É¹¦
// 0xff    :    ×Ô¼ìÊ§°Ü
//**********************************************************************
extern uint8 Drv_Bat_SelfTest(void);

//**********************************************************************
// º¯Êý¹¦ÄÜ:    ¶ÁÈ¡µçÁ¿Ê£Óà°Ù·Ö±È£¬Êý¾Ýµ¥Î»Îª%
// ÊäÈë²ÎÊý£º    
// percentData[0] £º   µçÁ¿°Ù·Ö±ÈÕûÊýÎ»µÄÊý¾Ý
// percentData[1] £º   µçÁ¿°Ù·Ö±ÈÐ¡ÊýÎ»µÄÊý¾Ý
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ²Ù×÷³É¹¦
// 0xff    :    ²Ù×÷Ê§°Ü
//**********************************************************************
extern uint8 Drv_Bat_ReadLevel(uint8 *p_i8percentData);

//**********************************************************************
// º¯Êý¹¦ÄÜ:    ¶ÁÈ¡µç³ØµçÑ¹£¬Êý¾Ýµ¥Î»Îª305uV
// ÊäÈë²ÎÊý£º    
// p_i8voltageData £ºÊý¾Ýµ¥Î»ÎªmV
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ²Ù×÷³É¹¦
// 0xff    :    ²Ù×÷Ê§°Ü
//**********************************************************************
extern uint8 Drv_Bat_ReadVoltage(uint16 *p_ui16voltageData);

//**********************************************************************
// º¯Êý¹¦ÄÜ:    ¶ÁÈ¡Ê£ÓàÊ±¼ä£¬Êý¾Ýµ¥Î»Îª£º1·ÖÖÓ
// ÊäÈë²ÎÊý£º    
// p_i8voltageData £ºÊý¾Ýµ¥Î»ÎªmV
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ²Ù×÷³É¹¦
// 0xff    :    ²Ù×÷Ê§°Ü
//**********************************************************************
extern uint8 Drv_Bat_ReadRemainTime(uint16 *p_i16timeData);

//**********************************************************************
// º¯Êý¹¦ÄÜ:    ÉèÖÃµçÁ¿¼Æ½øÈëË¯Ãß×´Ì¬
// ÊäÈë²ÎÊý£º   ÎÞ
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ²Ù×÷³É¹¦
// 0xff    :    ²Ù×÷Ê§°Ü
//**********************************************************************
extern uint8 Drv_Bat_GoSleep(void);

//**********************************************************************
// º¯Êý¹¦ÄÜ:    µçÁ¿¼Æ»½ÐÑ
// ÊäÈë²ÎÊý£º   ÎÞ
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ²Ù×÷³É¹¦
// 0xff    :    ²Ù×÷Ê§°Ü
//**********************************************************************
extern uint8 Drv_Bat_WakeUp(void);

//**********************************************************************
// º¯Êý¹¦ÄÜ:   ÉèÖÃ³äµç¼ì²é»Øµ÷
// ÊäÈë²ÎÊý£º   ÎÞ
// ·µ»Ø²ÎÊý£º    
// 0x00    :    ×Ô¼ì³É¹¦
// 0x02    :    ²ÎÊý·Ç·¨
//**********************************************************************
extern uint8 Drv_Bat_SetChargeCallBack(ChargeCheckCb chg_cb);

//**********************************************************************
// º¯Êý¹¦ÄÜ:	µç³Ø³äµç×´Ì¬¼ì²â
// ÊäÈë²ÎÊý£º	ÎÞ
// ·µ»Ø²ÎÊý£º	ÎÞ
//**********************************************************************
extern void Drv_Bat_CheckChargeStatus(void);

//**********************************************************************
// 函数功能:    使能模块使用的IO功能
// 输入参数：    无
// 返回参数：    
// 0x00    :    设置成功
// 0x01    :    设置失败
//**********************************************************************
uint8 Drv_Bat_EnableIO(void);

//**********************************************************************
// 函数功能:    关闭模块使用的IO功能，实现低功耗
// 输入参数：    无
// 返回参数：    
// 0x00    :    设置成功
// 0x01    :    设置失败
//**********************************************************************
uint8 Drv_Bat_DisableIO(void);

#endif

