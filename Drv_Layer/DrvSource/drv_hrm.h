#ifndef HRM_H
#define HRM_H

#include "platform_common.h"

typedef enum 
{
	OFF_TOUCH   = 0,
    ON_TOUCH    = 1,
}bsp_touch_state_s;

typedef enum
{
    HR_TOUCH,
    HR_DATA_READY,
}hrm_event;

typedef void (*hrm_event_cb)(hrm_event event);


//**********************************************************************
//函数功能：心率模块硬件使能（I2C总线初始化、GPIO口配置）     
//输入参数：无   
//返回参数：
// 0x00   :  操作成功
// 0x01   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_Open(hrm_event_cb hrm_cb);

//**********************************************************************
//函数功能：心率模块硬件关闭（I2C总线关闭、GPIO关闭），电源启动会造成系统电压
//          下跌，硬件关闭暂不关闭电源，但需要关闭心率算法，才能降低功耗    
//输入参数：无   
//返回参数：
// 0x00   :  操作成功
// 0xFF   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_Close(void);

//**********************************************************************
//函数功能：设置callback函数
//输入参数：事件回调函数
//返回参数：
// 0x00   :  操作成功
// 0x02   :  参数非法
//**********************************************************************
extern uint8 Drv_Hrm_SetCallBack(hrm_event_cb hrm_cb);

//**********************************************************************
//函数功能： 启动心率测量：心率模块配置、状态设置    
//输入参数： 无    
//返回参数：
// 0x00   :  操作成功
// 0x01   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_Start(void);

//**********************************************************************
//函数功能： 关闭心率测量：关闭心率算法、设置空闲状态  
//输入参数： 无    
//返回参数：
// 0x00   :  操作成功
// 0xFF   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_Stop(void);

//**********************************************************************
//函数功能： 读取心率模块有效触摸状态
//输入参数： 
//ui8istouch： 触摸状态指针    
//返回参数：
// 0x00   :  操作成功
// 0xFF   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_ReadTouchStatus(uint8 *ui8istouch);

//**********************************************************************
//函数功能： 心率计算
//输入参数： 
//ui64timestamp： 曝光时间调整量   
//返回参数：
// 0x00   :  操作成功
// 0xFF   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_Calculate(uint64_t ui64timestamp);

//**********************************************************************
//函数功能： 存储心率算法重力数据
//输入参数：     
//fifodata： 重力数据指针
//fifo_size：重力数据长度   
//返回参数：     
// 0x00   :  操作成功
// 0xFF   :  操作失败 
//**********************************************************************
extern uint8 Drv_Hrm_SetAccelMen(int16 *fifodata, uint16 fifo_size);

//**********************************************************************
//函数功能： 设置重力计量程
//输入参数： 量程值：0:2G, 1:4G, 2:8G, 3:16G
//返回参数： 无
//**********************************************************************
extern uint8 Drv_Hrm_SetAccelRange(uint8 newrange);


//**********************************************************************
//函数功能： 获取心率算法重力数据
//输入参数：     
//fifodata： 重力数据指针
//fifo_size：重力数据长度（每轴的数据长度）   
//返回参数： 无
//**********************************************************************
extern void accelerometer_get_fifo(int16 **fifo, uint32 *fifo_size);

//**********************************************************************
//函数功能： 启动重力计，数据缓存清零
//输入参数： 无
//返回参数： 无
//**********************************************************************
extern void accelerometer_start(void);

//**********************************************************************
//函数功能： 关闭重力计，数据缓存清零
//输入参数： 无
//返回参数： 无
//**********************************************************************
extern void accelerometer_stop(void);


//**********************************************************************
//函数功能： 工厂测试 
//输入参数： 无    
//返回参数：
// 0x00   :  操作成功
// 0xFF   :  操作失败
//**********************************************************************
extern uint8 Drv_Hrm_FactoryTest(uint16 ui16lightleak[3]);


 uint8 Drv_Hrm_SetCalCompleteCb(void (*cb)(uint8 hrmval));

#endif
