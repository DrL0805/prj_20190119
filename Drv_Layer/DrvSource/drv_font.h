#ifndef		_FONT_H
#define		_FONT_H

#include "platform_common.h"

typedef enum
{
    FONT_WAKEUP_CMD,  //下wake up命令
    FONT_SLEEP_CMD,   //下sleep 命令
}font_cmd;

typedef enum 
{
	ASCII_SIZE_5X7 	    = 1,
	ASCII_SIZE_7X8 	    = 2,
	ASCII_SIZE_6X12 	= 3,
	ASCII_SIZE_12_B_A 	= 4,
	ASCII_SIZE_12_B_T 	= 5,
	ASCII_SIZE_8X16 	= 6,
	ASCII_SIZE_8X16_BOLD =7,
	ASCII_SIZE_16_A 	= 8,
	ASCII_SIZE_16_T 	= 9,
	GB_SIZE_12X12 	    = 10,
	GB_SIZE_16X16 	    = 11,
}Wordstock_size_s;  // in using

//**********************************************************************
// 函数功能:	字库硬件初始化
// 输入参数：	无
// 返回参数：	
// 0x00    :    初始化成功
// 0x02    :    参数错误
//**********************************************************************
extern uint8 Drv_Font_Open(void);

//**********************************************************************
// 函数功能:	字库硬件待机低功耗配置
// 输入参数：	无
// 返回参数：	
// 0x00    :    设置成功
// 0x02    :    参数错误
//**********************************************************************
extern uint8 Drv_Font_Close(void);

//**********************************************************************
// 函数功能:	根据汉字编码读取汉字数据流
// 输入参数：	
// GB 	   : 	汉字编码
// pdata   :  	汉字数据流指针
// 返回参数：	
// 0x00    :    操作成功
// 0xff    :    操作失败
//**********************************************************************
extern uint8 Drv_Font_ReadGB2313(uint16 GB, uint8 gb_size,uint8 *pdata);

//**********************************************************************
// 函数功能:	UNICODE汉字编码转GB编码
// 输入参数：	
// unicode : 	unicode编码
// 返回参数：	GB编码
//**********************************************************************
extern uint16 Drv_Font_Unicode2GB(uint16 unicode);

//**********************************************************************
// 函数功能:	根据ASCII码读取字母数据流
// 输入参数：	
// ascii   : 	字母ASCII码
// ascii_size： 字母ASCII码点阵格式
// pdata   :  	字母据流指针
// 返回参数：	
// 0x00    :    操作成功
// 0xff    :    操作失败
//**********************************************************************
extern uint8 Drv_Font_ReadASCII(uint8 ascii, uint8 ascii_size, uint8 *pdata);

//**********************************************************************
// 函数功能:	根据UI码读取UI数据流
// 输入参数：	
// ascii   : 	字母ASCII码
// ascii_size： 字母ASCII码点阵格式
// pdata   :  	字母据流指针
// 返回参数：	
// 0x00    :    操作成功
// 0xff    :    操作失败
//**********************************************************************
extern uint8 Drv_Font_ReadUI(uint8 uisequence, uint8 *pdata);

//**********************************************************************
// 函数功能：向font字库芯片发送命令
// 输入参数：
//    ft_cmd = FONT_WAKEUP_CMD: 唤醒指令
//    ft_cmd = FONT_SLEEP_CMD:  睡眠指令
// 返回参数：	0x00:操作成功
//              0x02:参数错误
//**********************************************************************
extern uint8 Drv_Font_SendCmd(font_cmd ft_cmd);

//**********************************************************************
// 函数功能:	字库芯片自检
// 输入参数：	无
// 返回参数：	
// 0x00    :    自检通过
// 0x01    :    自检失败
//**********************************************************************
extern uint8 Drv_Font_SelfTest(void);

#endif
