/**********************************************************/
//  				   created by huaangrunguang
// V1.0   2017-7-12    modified by yudongyou 
/*********************************************************/
#ifndef MULTITIMER_H
#define MULTITIMER_H

#include "platform_common.h"

#define MULTITIMER_NUM_MAX       8 //事件数量,根据需求而定。

// Setting Options
typedef enum {
	FREQ_1HZ   = 1,
	FREQ_2HZ   = 2,
	FREQ_25HZ  = 25,
	FREQ_50HZ  = 50,
	FREQ_100HZ = 100,
	FREQ_200HZ = 200,
}multiTimerFreq_Options;

//**********************************************************************
// 函数功能：   定时器初始化，并返回操作结果。
// 输入参数：   void
// 返回参数:
//**********************************************************************
extern void Drv_MultiTimer_Init(void);

//**********************************************************************
// 函数功能：	设置一个timer，并返回操作结果。
// 输入参数：	id:		返回定时器ID
// 				freq:	定时器设置频率
// 				IsrCb:	回调函数
// 返回参数：	0x00: 设置成功
// 				0x01: 设置失败
//              0x02: 参数非法
//**********************************************************************
extern uint8 Drv_MultiTimer_Set(uint16 *id, uint16 freq, void (*IsrCb)(void));

//**********************************************************************
// 函数功能：   删除一个timer，并返回操作结果。
// 输入参数：   id:		定时器ID
// 返回参数：	0x00:	设置成功
// 				0x02:   参数非法
//**********************************************************************
extern uint8 Drv_MultiTimer_Delete(uint16 id);

#endif



