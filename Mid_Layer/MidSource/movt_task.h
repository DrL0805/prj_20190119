#ifndef			MOVT_TASK_H
#define			MOVT_TASK_H



#define			MOVT_TASK_QUEUE_SIZE			8


enum
{
	MOVT_DIRECTION_AUTO		= 0,				// ??????
	MOVT_DIRECTION_FORWARD,						// ?????
	MOVT_DIRECTION_RESERVE,						// ?????
};

#ifndef		MOVT_NUM_TYPEDEF
#define		MOVT_NUM_TYPEDEF
// movt num
typedef enum
{
    MOVT_M_CLOCK = 0,
    MOVT_3_CLOCK,
    MOVT_6_CLOCK,
    MOVT_9_CLOCK,
    MOVT_MAX_NUM,
} movt_num_t;
#endif


typedef enum _movt_task_msg_id{
	MOVT_MSG_MC_FORWARD			= 0x0001,		//position 2clock msg
	MOVT_MSG_MC_REVERSE,
	MOVT_MSG_MC_FORWARDING,
	MOVT_MSG_MC_REVERSEING,
	MOVT_MSG_MC_SET_CUR,
	MOVT_MSG_MC_SET_AIM,
	MOVT_MSG_MC_SET_CUR_AIM,
	MOVT_MSG_MC_SET_CUR_FORWARD,
	MOVT_MSG_MC_SET_AIM_FORWARD,
	MOVT_MSG_MC_SET_CUR_AIM_FORWARD,
	MOVT_MSG_MC_SET_CUR_REVERSE,
	MOVT_MSG_MC_SET_AIM_REVERSE,
	MOVT_MSG_MC_SET_CUR_AIM_REVERSE,
	MOVT_MSG_MC_STOP,
	MOVT_MSG_MC_RECOVER,
	MOVT_MSG_MC_RECOVER_FORWARD,
	MOVT_MSG_MC_RECOVER_REVERSE,
	MOVT_MSG_MC_READ_CUR,
	MOVT_MSG_MC_READ_AIM,
	MOVT_MSG_MC_FORWARD_FINISH,
	MOVT_MSG_MC_REVERSE_FINISH,

	
	MOVT_MSG_3C_FORWARD		= 0x0301,		//position 10clock msg
	MOVT_MSG_3C_REVERSE,
	MOVT_MSG_3C_FORWARDING,
	MOVT_MSG_3C_REVERSEING,
	MOVT_MSG_3C_SET_CUR,
	MOVT_MSG_3C_SET_AIM,
	MOVT_MSG_3C_SET_CUR_AIM,
	MOVT_MSG_3C_SET_CUR_FORWARD,
	MOVT_MSG_3C_SET_AIM_FORWARD,
	MOVT_MSG_3C_SET_CUR_AIM_FORWARD,
	MOVT_MSG_3C_SET_CUR_REVERSE,
	MOVT_MSG_3C_SET_AIM_REVERSE,
	MOVT_MSG_3C_SET_CUR_AIM_REVERSE,
	MOVT_MSG_3C_STOP,
	MOVT_MSG_3C_RECOVER,
	MOVT_MSG_3C_RECOVER_FORWARD,
	MOVT_MSG_3C_RECOVER_REVERSE,
	MOVT_MSG_3C_READ_CUR,
	MOVT_MSG_3C_READ_AIM,
	MOVT_MSG_3C_FORWARD_FINISH,
	MOVT_MSG_3C_REVERSE_FINISH,

	MOVT_MSG_6C_FORWARD		= 0x0601,		//position 10clock msg
	MOVT_MSG_6C_REVERSE,
	MOVT_MSG_6C_FORWARDING,
	MOVT_MSG_6C_REVERSEING,
	MOVT_MSG_6C_SET_CUR,
	MOVT_MSG_6C_SET_AIM,
	MOVT_MSG_6C_SET_CUR_AIM,
	MOVT_MSG_6C_SET_CUR_FORWARD,
	MOVT_MSG_6C_SET_AIM_FORWARD,
	MOVT_MSG_6C_SET_CUR_AIM_FORWARD,
	MOVT_MSG_6C_SET_CUR_REVERSE,
	MOVT_MSG_6C_SET_AIM_REVERSE,
	MOVT_MSG_6C_SET_CUR_AIM_REVERSE,
	MOVT_MSG_6C_STOP,
	MOVT_MSG_6C_RECOVER,
	MOVT_MSG_6C_RECOVER_FORWARD,
	MOVT_MSG_6C_RECOVER_REVERSE,
	MOVT_MSG_6C_READ_CUR,
	MOVT_MSG_6C_READ_AIM,
	MOVT_MSG_6C_FORWARD_FINISH,
	MOVT_MSG_6C_REVERSE_FINISH,

	MOVT_MSG_9C_FORWARD		= 0x0901,		//position 10clock msg
	MOVT_MSG_9C_REVERSE,
	MOVT_MSG_9C_FORWARDING,
	MOVT_MSG_9C_REVERSEING,
	MOVT_MSG_9C_SET_CUR,
	MOVT_MSG_9C_SET_AIM,
	MOVT_MSG_9C_SET_CUR_AIM,
	MOVT_MSG_9C_SET_CUR_FORWARD,
	MOVT_MSG_9C_SET_AIM_FORWARD,
	MOVT_MSG_9C_SET_CUR_AIM_FORWARD,
	MOVT_MSG_9C_SET_CUR_REVERSE,
	MOVT_MSG_9C_SET_AIM_REVERSE,
	MOVT_MSG_9C_SET_CUR_AIM_REVERSE,
	MOVT_MSG_9C_STOP,
	MOVT_MSG_9C_RECOVER,
	MOVT_MSG_9C_RECOVER_FORWARD,
	MOVT_MSG_9C_RECOVER_REVERSE,
	MOVT_MSG_9C_READ_CUR,
	MOVT_MSG_9C_READ_AIM,
	MOVT_MSG_9C_FORWARD_FINISH,
	MOVT_MSG_9C_REVERSE_FINISH,

	//task watchdog
	MOVT_TASK_WATCHDOG 		= 0x0A00,

} movt_task_msg_id;


typedef	struct
{
	uint16	id;
	uint16	cur;
	uint16	aim;
}movt_task_msg_t;


uint16 Mid_Movt_SelfTest(void);
uint16 Mid_Movt_PolarSet(movt_num_t  clock, uint8 polar);
uint16 Mid_Movt_PolarRead(movt_num_t  clock, uint8 *polar);
uint16 Mid_Movt_RecoverDirectionSet(movt_num_t  clock, uint8 directionSet);
uint16 Mid_Movt_RecoverDirectionRead(movt_num_t  clock, uint8 *directionSet);
uint16 Mid_Movt_ForwardWaveformSet(movt_num_t  clock, uint8 *waveform);
uint16 Mid_Movt_ReverseWaveformSet(movt_num_t  clock, uint8 *waveform);
void Mid_Movt_AllRecover(void);
uint16 MovtTask_EventSet(movt_task_msg_t msg);
void MovtTask_CreateTask(void);

// extern TimerHandle_t movtTaskWatchdogTimer;



#endif	//MOVTAPP_H
